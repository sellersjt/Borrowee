@model IEnumerable<Borrowee.Models.TransactionModels.TransactionListItem>

@{
    ViewBag.Title = "Transaction List";
}

<h2>@ViewBag.Title</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
@if (TempData.ContainsKey("SaveResult"))
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        <button type="button" class="close" data-dismiss="alert">
            <span>&times;</span>
        </button>
        @TempData["SaveResult"]
    </div>
}

<table class="table table-hover rwd-table">
    <thead class="bg-dark">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.Item)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ItemImage)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Borrower)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LentOutDateUtc)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ReturnDateUtc)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IsReturned)
            </th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td data-th="@Html.DisplayNameFor(model => model.Item)">
                    @Html.DisplayFor(modelItem => item.Item.Name)
                </td>
                <td data-th="@Html.DisplayNameFor(model => model.ItemImage)">
                    @if (item.ItemImage != null)
                    {
                        <img src="@(Url.Content(Constants.ItemThumbnailPath) + @Html.DisplayFor(modelItem => item.ItemImage.FileName))" class="rounded-jt" />
                    }
                </td>
                <td data-th="@Html.DisplayNameFor(model => model.Borrower)">
                    @Html.DisplayFor(modelItem => item.Borrower.FirstName)
                    @Html.DisplayFor(modelItem => item.Borrower.LastName)
                </td>
                <td data-th="@Html.DisplayNameFor(model => model.LentOutDateUtc)">
                    @Html.DisplayFor(modelItem => item.LentOutDateUtc)
                </td>
                <td data-th="@Html.DisplayNameFor(model => model.ReturnDateUtc)">
                    @Html.DisplayFor(modelItem => item.ReturnDateUtc, new { Id = item.Id })
                </td>
                <td data-th="@Html.DisplayNameFor(model => model.IsReturned)">
                    @Html.DisplayFor(modelItem => item.IsReturned, new { Id = item.Id })
                </td>
                <td data-th="Action">
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                    @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.Id })
                </td>
            </tr>
        }
    </tbody>
</table>
<div class="text-center">
    @Html.ActionLink("Home", "Index", "Home", new { area = "" }, new { @class = "btn btn-primary m-2" })
    @Html.ActionLink("Manage Items", "Index", "Item", new { area = "" }, new { @class = "btn btn-primary m-2" })
    @Html.ActionLink("Manage Borrowers", "Index", "Borrower", new { area = "" }, new { @class = "btn btn-primary m-2" })
    @Html.ActionLink("Manage Transactions", "Index", "Transaction", new { area = "" }, new { @class = "btn btn-primary m-2" })
    @Html.ActionLink("Manage Images", "Index", "ItemImage", new { area = "" }, new { @class = "btn btn-primary m-2" })
</div>

@section scripts {
    <script language="javascript" type="text/javascript">
        $(document).ready(function () {
            $("i[data-toggle='returned']")
                .click(function (e) {
                    var target = $(e.target);
                    var transactionId = target.attr("data-id");
                    var returnedSet = target.hasClass("fa-check-square-o");

                    $.ajax({
                        method: returnedSet ? "DELETE" : "PUT",
                        url: "/api/transaction/" + transactionId + "/return",
                        data: null
                    })
                        .done(function (r) {
                            target.removeClass();
                            target.addClass("fa " + (returnedSet ? "fa-square-o" : "fa-check-square-o"));

                            if (returnedSet) {
                                document.getElementById(transactionId).innerHTML = "";
                            }
                            else {
                                document.getElementById(transactionId).innerHTML = new Date().toLocaleDateString();
                            }
                        })
                        .fail(function (r) {
                            alert("Failed to change returned status");
                        });
                });
        });

        $(document).ready(function () {
            $('[tooltip-toggle="tooltip"]').tooltip();
        });
    </script>
}